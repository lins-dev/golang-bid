// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products("seller_id", "product_name", "description", "price", "auction_end")
VALUES($1, $2, $3, $4, $5)
RETURNING id, uuid, seller_id, product_name, description, price, auction_end, is_sold, created_at, updated_at
`

type CreateProductParams struct {
	SellerID    int32     `json:"seller_id"`
	ProductName string    `json:"product_name"`
	Description string    `json:"description"`
	Price       int32     `json:"price"`
	AuctionEnd  time.Time `json:"auction_end"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.SellerID,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.AuctionEnd,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.SellerID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.AuctionEnd,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, uuid, seller_id, product_name, description, price, auction_end, is_sold, created_at, updated_at FROM products
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.SellerID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.AuctionEnd,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByUuid = `-- name: GetProductByUuid :one
SELECT id, uuid, seller_id, product_name, description, price, auction_end, is_sold, created_at, updated_at FROM products
WHERE uuid = $1
LIMIT 1
`

func (q *Queries) GetProductByUuid(ctx context.Context, argUuid uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByUuid, argUuid)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.SellerID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.AuctionEnd,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, uuid, seller_id, product_name, description, price, auction_end, is_sold, created_at, updated_at FROM products
ORDER BY product_name
`

func (q *Queries) ListProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.SellerID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.AuctionEnd,
			&i.IsSold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductPaginated = `-- name: ListProductPaginated :many
SELECT id, uuid, seller_id, product_name, description, price, auction_end, is_sold, created_at, updated_at FROM products
ORDER BY product_name
LIMIT $1 OFFSET $2
`

type ListProductPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductPaginated(ctx context.Context, arg ListProductPaginatedParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.SellerID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.AuctionEnd,
			&i.IsSold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
