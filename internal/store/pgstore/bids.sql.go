// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bids.sql

package pgstore

import (
	"context"
)

const createBid = `-- name: CreateBid :one
INSERT INTO bids("product_id", "bidder_id", "bid_amount")
VALUES($1, $2, $3)
RETURNING id, uuid, product_id, bidder_id, bid_amount, created_at, updated_at
`

type CreateBidParams struct {
	ProductID int32 `json:"product_id"`
	BidderID  int32 `json:"bidder_id"`
	BidAmount int32 `json:"bid_amount"`
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (Bid, error) {
	row := q.db.QueryRow(ctx, createBid, arg.ProductID, arg.BidderID, arg.BidAmount)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ProductID,
		&i.BidderID,
		&i.BidAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBidProductId = `-- name: GetBidProductId :many
SELECT id, uuid, product_id, bidder_id, bid_amount, created_at, updated_at FROM bids
WHERE product_id = $1
ORDER BY bid_amount DESC
`

func (q *Queries) GetBidProductId(ctx context.Context, productID int32) ([]Bid, error) {
	rows, err := q.db.Query(ctx, getBidProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bid
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.ProductID,
			&i.BidderID,
			&i.BidAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBidProductIdPaginated = `-- name: GetBidProductIdPaginated :many
SELECT id, uuid, product_id, bidder_id, bid_amount, created_at, updated_at FROM bids
WHERE product_id = $1
ORDER BY bid_amount DESC
LIMIT $2 OFFSET $3
`

type GetBidProductIdPaginatedParams struct {
	ProductID int32 `json:"product_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetBidProductIdPaginated(ctx context.Context, arg GetBidProductIdPaginatedParams) ([]Bid, error) {
	rows, err := q.db.Query(ctx, getBidProductIdPaginated, arg.ProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bid
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.ProductID,
			&i.BidderID,
			&i.BidAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHightestBidByProductId = `-- name: GetHightestBidByProductId :one
SELECT id, uuid, product_id, bidder_id, bid_amount, created_at, updated_at FROM bids
WHERE product_id = $1
ORDER BY bid_amount DESC
LIMIT 1
`

func (q *Queries) GetHightestBidByProductId(ctx context.Context, productID int32) (Bid, error) {
	row := q.db.QueryRow(ctx, getHightestBidByProductId, productID)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ProductID,
		&i.BidderID,
		&i.BidAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
