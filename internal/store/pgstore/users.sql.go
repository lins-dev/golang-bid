// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users("user_name", "email", "password_hash", "bio")
VALUES($1, $2, $3, $4)
    RETURNING id, uuid, user_name, email, password_hash, bio, created_at, updated_at
`

type CreateUserParams struct {
	UserName     string `json:"user_name"`
	Email        string `json:"email"`
	PasswordHash []byte `json:"password_hash"`
	Bio          string `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, uuid, user_name, email, password_hash, bio, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, uuid, user_name, email, password_hash, bio, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT id, uuid, user_name, email, password_hash, bio, created_at, updated_at FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUserByUuid(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUuid, argUuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, uuid, user_name, email, password_hash, bio, created_at, updated_at FROM users
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserName,
			&i.Email,
			&i.PasswordHash,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
    set user_name = $2,
    email = $3,
    password_hash = $4,
    bio = $5
WHERE id = $1
RETURNING id, uuid, user_name, email, password_hash, bio, created_at, updated_at
`

type UpdateUserParams struct {
	ID           int32  `json:"id"`
	UserName     string `json:"user_name"`
	Email        string `json:"email"`
	PasswordHash []byte `json:"password_hash"`
	Bio          string `json:"bio"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.UserName,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserByUuid = `-- name: UpdateUserByUuid :one
UPDATE users
    set user_name = $2,
    email = $3,
    password_hash = $4,
    bio = $5
WHERE uuid = $1
RETURNING id, uuid, user_name, email, password_hash, bio, created_at, updated_at
`

type UpdateUserByUuidParams struct {
	Uuid         uuid.UUID `json:"uuid"`
	UserName     string    `json:"user_name"`
	Email        string    `json:"email"`
	PasswordHash []byte    `json:"password_hash"`
	Bio          string    `json:"bio"`
}

func (q *Queries) UpdateUserByUuid(ctx context.Context, arg UpdateUserByUuidParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByUuid,
		arg.Uuid,
		arg.UserName,
		arg.Email,
		arg.PasswordHash,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.PasswordHash,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
